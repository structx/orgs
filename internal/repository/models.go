// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package repository

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type TOrganizationStatus string

const (
	TOrganizationStatusCreated    TOrganizationStatus = "created"
	TOrganizationStatusUpdated    TOrganizationStatus = "updated"
	TOrganizationStatusUnverified TOrganizationStatus = "unverified"
	TOrganizationStatusVerified   TOrganizationStatus = "verified"
)

func (e *TOrganizationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TOrganizationStatus(s)
	case string:
		*e = TOrganizationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TOrganizationStatus: %T", src)
	}
	return nil
}

type NullTOrganizationStatus struct {
	TOrganizationStatus TOrganizationStatus
	Valid               bool // Valid is true if TOrganizationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTOrganizationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TOrganizationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TOrganizationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTOrganizationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TOrganizationStatus), nil
}

func (e TOrganizationStatus) Valid() bool {
	switch e {
	case TOrganizationStatusCreated,
		TOrganizationStatusUpdated,
		TOrganizationStatusUnverified,
		TOrganizationStatusVerified:
		return true
	}
	return false
}

func AllTOrganizationStatusValues() []TOrganizationStatus {
	return []TOrganizationStatus{
		TOrganizationStatusCreated,
		TOrganizationStatusUpdated,
		TOrganizationStatusUnverified,
		TOrganizationStatusVerified,
	}
}

type Organization struct {
	ID          uuid.UUID
	ProcessorID interface{}
	Name        string
	Status      TOrganizationStatus
	CreatedAt   time.Time
	UpdatedAt   sql.NullTime
}
